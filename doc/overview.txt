*overview*	View and navigate a table of contents for markup files

		 ___ _  _____ _____  __(_)__ _    __
		/ _ \ !/ / -_) __/ !/ / / -_) !/!/ /
		\___/___/\__/_/  !___/_/\__/!__.__/

		https://git.sr.ht/~adigitoleo/overview.nvim

Use `:lua require('overview').toggle()` to show the table of contents for this
help file! Navigate sections by pressing `Enter` (`<Cr>`) on any line in the
table of contents. Alternate focus between the table of contents window and
the original buffer using `:lua require('overview.nvim').focus()`; it is a
good idea to set |key-mapping|s for these functions, for example: >

	overview = require("overview.nvim")
	if overview ~= nil then
	    vim.keymap.set("n", "gO", overview.toggle, { desc = "Toggle Overview sidebar for current buffer" })
	    vim.keymap.set("n", "go", overview.focus, { desc = "Toggle focus between Overview sidebar and source buffer" })
	end

==============================================================================
INTRODUCTION						*overview-introduction*

This plugin provides dynamic table of contents for markup files. Supported
file types include markdown, help, man and toml. The plugin requires NeoVim,
and is know to work on versions 0.9.5+ (the LSP functionality used for symbol
lists in code files was added in version 0.6.1). The table of contents is
presented using a floating window (see |api-floatwin|).

Bug fixes and feature requests are welcome at my public inbox: >

	https://lists.sr.ht/~adigitoleo/public-inbox

Patches should be applicable to the `dev` branch. See |overview-bugs| for a
list of current known issues that are most in need of attention.


==============================================================================
USAGE							*overview-usage*

Once the plugin files are on your 'packpath', load the plugin with >

	:lua require('overview')

in your `init.vim` file or simply >

	require('overview')

in `init.lua`. Default options are applied automatically, but can be
configured by passing a configuration table to the `setup` function, e.g. >

	require('overview').setup{ window = { location = "left" } }

Configuration options are described in |overview-config|.


==============================================================================
CONFIGURATION						*overview-config*

The following configuration options are supported for Overview.
Any omitted values will be set to their indicated defaults.

Lua configuration example~
>
	require('overview').setup{
		window = {
			width = 42
			wrap = false
		},
		toc = {
			maxlevel = 2
		},
		augroup = "CustromAugroupName",
	}

------------------------------------------------------------------------------
						*Overview.config.window*

This option controls the appearance of the floating window. It is a table with
the following keys

	key~		value~		description~
	----------------------------------------------------------------------
	location	`"right"`	location of the floating window
			or `"left"`	(`"right"` by default)
	----------------------------------------------------------------------
	width		integer		width of the floating window
					(`32` by default)
	----------------------------------------------------------------------
	wrap		boolean		text wrap setting in the floating
					window, see 'wrap' (`true` by default)
	----------------------------------------------------------------------
	list		boolean		list mode in the floating window,
					see 'list' (CURRENTLY NOT WORKING)
	----------------------------------------------------------------------
	winblend	integer		transparency of the floating window,
					see 'winblend' (`25` by default)
	----------------------------------------------------------------------
	zindex		integer		"priority" of the floating window,
					see |api-win_config| (`21` by default)

------------------------------------------------------------------------------
						*Overview.config.toc*

This option controls the appearance and behaviour of the table of contents
buffer. It is a table with the following keys

	key~		value~		description~
	----------------------------------------------------------------------
	maxlevel	integer		maximum nesting depth in the displayed
					table of contents (`3` by default)

------------------------------------------------------------------------------
					*Overview.config.lsp_const_symbolkinds*

This table value is used to define the pattern matches that select which LSP
symbols, found at the GLOBAL scope, will be listed in the table of contents
window. The keys of the table should match a code |filetype|, except for the
special key `_fallback` which defines fallback patterns for all code filetypes
that do not have an explicitly defined symbol whitelist.

Lua configuration example~
>
	require('overview').setup{
		lsp_const_symbolkinds = {
			_fallback = { "%[Variable%]%s+%u+", "%[Constant%]" },
			lua = { "%[Variable%]%s+%u+" },
		},
	}


For the list of named LSP symbol types, which should be used to define the
patterns, please consult:
<https://lsp-devtools.readthedocs.io/en/latest/capabilities/text-document/document-symbols.html#symbolkind>.

NOTE: By default, only a `_fallback` is set (patterns as above).

------------------------------------------------------------------------------
					*Overview.config.lsp_scoped_symbolkinds*

This table value is used to define the pattern matches that select which LSP
symbols, found in any LOCAL scope, will be listed in the table of contents
window. The keys of the table should match a code |filetype|, except for the
special key `_fallback` which defines fallback patterns for all code filetypes
that do not have an explicitly defined symbol whitelist.

Lua configuration example~
>
	require('overview').setup{
		lsp_scoped_symbolkinds = {
			_fallback = { "%[Constructor%]", "%[Enum%]", "%[Function%]", "%[Class%]", "%[Method%]", "%[Namespace%]", "%[Struct%]" },
			lua = { "%[Function%]", "%[Method%]", "%[Struct%]" },
		},
	}

For the list of named LSP symbol types, which should be used to define the
patterns, please consult:
<https://lsp-devtools.readthedocs.io/en/latest/capabilities/text-document/document-symbols.html#symbolkind>.

NOTE: By default, only a `_fallback` is set (patterns as above).

------------------------------------------------------------------------------
						*Overview.config.augroup*

This string value is used to define the name of the |autocommand| group created
by the plugin. By default it is set to `"Overview"`.

------------------------------------------------------------------------------
				*Overview.config.remove_default_bindings*

This boolean value toggles the removal of default bindings for builtin table
of contents displays (|gO| in help buffers and man pages), which allows the
key sequence to be used for e.g. |Overview.toggle|. It is `true` by default.


==============================================================================
FUNCTIONS				*overview-functions* *overview-api*

This plugin exposes a few functions via the `require("overview")` Lua namespace
which can be called directly or used in key mappings. They are listed in the
table below.

	function~	description~
	----------------------------------------------------------------------
	`toggle()`	toggle the table of contents display
	`focus()`	toggle focus between the table of contents and the
			source buffer, or `close()` if the source buffer is
			missing
	`open()`	open a new table of contents display for the current
			buffer if the filetype is supported
	`close()`	close any existing table of contents sidebar


==============================================================================
BUGS							*overview-bugs*

The symbols list for code files is still experimental, and has some issues:
`open()` fails to populate the list until the user focuses back to the code
buffer; LSP-populated sidebars also do not respond to `swap()` immediately.

vim:tw=78:ts=8:noet:ft=help:norl:
